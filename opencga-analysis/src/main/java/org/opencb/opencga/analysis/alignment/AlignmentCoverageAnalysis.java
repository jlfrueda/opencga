/*
 * Copyright 2015-2020 OpenCB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opencb.opencga.analysis.alignment;

import org.apache.commons.io.FileUtils;
import org.opencb.biodata.tools.alignment.BamManager;
import org.opencb.commons.datastore.core.*;
import org.opencb.opencga.analysis.alignment.qc.AlignmentFlagStatsAnalysis;
import org.opencb.opencga.analysis.tools.OpenCgaTool;
import org.opencb.opencga.analysis.wrappers.deeptools.DeeptoolsWrapperAnalysis;
import org.opencb.opencga.catalog.exceptions.CatalogException;
import org.opencb.opencga.core.api.ParamConstants;
import org.opencb.opencga.core.exceptions.ToolException;
import org.opencb.opencga.core.models.alignment.AlignmentFlagStatsParams;
import org.opencb.opencga.core.models.alignment.AlignmentQcParams;
import org.opencb.opencga.core.models.alignment.CoverageIndexParams;
import org.opencb.opencga.core.models.alignment.DeeptoolsWrapperParams;
import org.opencb.opencga.core.models.common.Enums;
import org.opencb.opencga.core.models.file.File;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.opencga.core.response.OpenCGAResult;
import org.opencb.opencga.core.tools.annotations.Tool;
import org.opencb.opencga.core.tools.annotations.ToolParams;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

@Tool(id = AlignmentCoverageAnalysis.ID, resource = Enums.Resource.ALIGNMENT, description = "Alignment coverage analysis.")
public class AlignmentCoverageAnalysis extends OpenCgaTool {

    public final static String ID = "coverage-index-run";
    public final static String DESCRIPTION = "Compute the Index a given alignment file, e.g., create a .bai file from a .bam file";

    @ToolParams
    protected final CoverageIndexParams coverageIndexParams = new CoverageIndexParams();

    private String study;
    private String inputFile;
    private boolean overwrite;

    private File inputCatalogFile;
    private Path inputPath;
    private Path outputPath;

    protected void check() throws Exception {
        super.check();

        OpenCGAResult<File> fileResult;
        try {
            fileResult = catalogManager.getFileManager().get(getStudy(), coverageIndexParams.getFile(), QueryOptions.empty(), token);
        } catch (CatalogException e) {
            throw new ToolException("Error accessing file '" + inputFile + "' of the study " + study + "'", e);
        }
        if (fileResult.getNumResults() <= 0) {
            throw new ToolException("File '" + inputFile + "' not found in study '" + study + "'");
        }

        inputCatalogFile = fileResult.getResults().get(0);
        inputPath = Paths.get(inputCatalogFile.getUri());
        String filename = inputPath.getFileName().toString();

        // Check if the input file is .bam or .cram
        if (!filename.endsWith(".bam")) {
            throw new ToolException("Invalid input alignment file '" + inputFile + "': it must be in BAM format");
        }

        outputPath = getOutDir().resolve(filename + ".bw");
    }

    @Override
    protected void run() throws Exception {

        step(ID, () -> {
            // Run the command deeptools/bamCoverage
            Map<String, String> bamCoverageParams = new HashMap<>();
            bamCoverageParams.put("b", inputPath.toAbsolutePath().toString());
            bamCoverageParams.put("o", outputPath.toAbsolutePath().toString());
            bamCoverageParams.put("binSize", String.valueOf(coverageIndexParams.getWindowSize()));
            bamCoverageParams.put("outFileFormat", "bigwig");
            bamCoverageParams.put("minMappingQuality", "20");

            Map<String, Object> params = new DeeptoolsWrapperParams("bamCoverage", null, bamCoverageParams)
                    .toParams(new ObjectMap(ParamConstants.STUDY_PARAM, study));

            OpenCGAResult<Job> jobResult = catalogManager.getJobManager()
                    .submit(study, DeeptoolsWrapperAnalysis.ID, Enums.Priority.MEDIUM, params, null, "Job generated by "
                            + getId() + " - " + getJobId(), Collections.emptyList(), Collections.emptyList(), token);
            addEvent(Event.Type.INFO, "Submit job " + jobResult.first().getId() + " to deeptools/bamCoverage ("
                    + DeeptoolsWrapperAnalysis.ID + ")");

            // Wait for job
            Job job;
            String status;
            Query query = new Query("id", jobResult.first().getId());
            do {
                Thread.sleep(3000);
                OpenCGAResult<Job> result = catalogManager.getJobManager().search(study, query, QueryOptions.empty(), token);
                job = result.first();
                status = job.getInternal().getStatus().getId();
            } while (status.equals(Enums.ExecutionStatus.PENDING) || status.equals(Enums.ExecutionStatus.RUNNING)
                    || status.equals(Enums.ExecutionStatus.QUEUED) || status.equals(Enums.ExecutionStatus.READY)
                    || status.equals(Enums.ExecutionStatus.REGISTERING));

//
//            Path indexPath = Paths.get(inputPath.toFile().getParent()).resolve(outputPath.getFileName());
//            if (overwrite || !indexPath.toFile().exists()) {
//                // Compute index if necessary
//                BamManager bamManager = new BamManager(inputPath);
//                bamManager.createIndex(outputPath);
//                bamManager.close();
//
//                if (!outputPath.toFile().exists()) {
//                    throw new ToolException("Something wrong happened when computing index file for '" + inputFile + "'");
//                }
//
//                if (indexPath.toFile().exists()) {
//                    indexPath.toFile().delete();
//                }
//                FileUtils.moveFile(outputPath.toFile(), indexPath.toFile());
//            }
//
//            boolean isLinked = true;
//            Path outputCatalogPath = Paths.get(inputCatalogFile.getPath()).getParent().resolve(outputPath.getFileName());
//            OpenCGAResult<File> fileResult;
//            try {
//                fileResult = catalogManager.getFileManager().get(getStudy(), outputCatalogPath.toString(), QueryOptions.empty(), token);
//                if (fileResult.getNumResults() <= 0) {
//                    isLinked = false;
//                }
//            } catch (CatalogException e) {
//                isLinked = false;
//            }
//            if (!isLinked) {
//                catalogManager.getFileManager().link(getStudy(), indexPath.toUri(), outputCatalogPath.getParent().toString(),
//                        new ObjectMap("parents", true), token);
//            }
        });
    }

    public String getStudy() {
        return study;
    }

    public AlignmentCoverageAnalysis setStudy(String study) {
        this.study = study;
        return this;
    }

    public String getInputFile() {
        return inputFile;
    }

    public AlignmentCoverageAnalysis setInputFile(String inputFile) {
        this.inputFile = inputFile;
        return this;
    }

    public boolean isOverwrite() {
        return overwrite;
    }

    public AlignmentCoverageAnalysis setOverwrite(boolean overwrite) {
        this.overwrite = overwrite;
        return this;
    }
}
